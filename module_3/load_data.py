
# load_data.py
# Minimal script: prompt for a JSON/JSONL file and load into PostgreSQL.
# Expects already-clean data and a flat object per row.
# Table: applicants (single table), columns exactly as specified.
# No extra validation or error handling by design.

import json
import psycopg2

# --- Prompts ---
json_path = input("Path to JSON (.json) or JSON Lines (.jsonl/.ndjson): ").strip()
host = input("PostgreSQL host [localhost]: ").strip() or "localhost"
port = int(input("PostgreSQL port [5432]: ").strip() or "5432")
dbname = input("Database name: ").strip()
user = input("User: ").strip()
password = input("Password: ").strip()

# --- Read input ---
records = []
if json_path.lower().endswith((".jsonl", ".ndjson")):
    with open(json_path, "r", encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if line:
                records.append(json.loads(line))
else:
    with open(json_path, "r", encoding="utf-8") as f:
        records = json.load(f)

# helper: convert empty-like strings to None; convert numeric fields to float or None
def to_null(v, numeric=False):
    if v is None:
        return None
    s = str(v).strip()
    if s == "" or s.lower() in {"null", "none", "n/a", "na"}:
        return None
    if numeric:
        try:
            return float(s)
        except Exception:
            return None
    return s

# --- DB connect ---
conn = psycopg2.connect(host=host, port=port, dbname=dbname, user=user, password=password)
cur = conn.cursor()

# --- Create table ---
cur.execute("""
    CREATE TABLE IF NOT EXISTS applicants (
        p_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        program TEXT,
        comments TEXT,
        date_added DATE,
        url TEXT,
        status TEXT,
        term TEXT,
        us_or_international TEXT,
        gpa FLOAT,
        gre FLOAT,
        gre_v FLOAT,
        gre_aw FLOAT,
        degree TEXT,
        llm_generated_program TEXT,
        llm_generated_university TEXT
    );
""")

# --- Insert rows ---
columns = [
    "program","comments","date_added","url","status","term",
    "us_or_international","gpa","gre","gre_v","gre_aw","degree",
    "llm_generated_program","llm_generated_university"
]
cols_noid = [
    'program','comments','date_added','url','status','term',
    'us_or_international','gpa','gre','gre_v','gre_aw','degree',
    'llm_generated_program','llm_generated_university'
]
placeholders = ",".join(["%s"]*len(columns))
sql = f"INSERT INTO applicants ({','.join(columns)}) VALUES ({placeholders});"

for rec in records:
    vals = []
    for c in columns:
        if c in ("gpa","gre","gre_v","gre_aw"):
            vals.append(to_null(rec.get(c), numeric=True))
        else:
            vals.append(to_null(rec.get(c), numeric=False))
    cur.execute(sql, vals)

conn.commit()
cur.close()
conn.close()
print("Done.")
